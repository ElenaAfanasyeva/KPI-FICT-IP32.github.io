---
layout: post
title: "Лекція 11. Асиметричні криптосистеми"
date: 2016-11-17 14:33:33 +0200
categories: kpi_s07_data_security
---

## Асиметричні криптосистеми

У випадку симетричних криптосистем, які розглядалися ранше, була необхідність створення закритого секретного каналу зв'язку, щоб передати ключ шифрування.

### RSA

- Названа по першим літерам прізвищ розробників
- Блоковий алгоритм
- Детальніше можна почитати на [Wikipedia](https://en.wikipedia.org/wiki/RSA_(cryptosystem))

Необоротні функції:

$$ y = a^{x} \mod N $$

Ряд функцій можна представити у вигляді ряду, тобто маючи достстньо велику таблицю значень x та відповідних їм значень y можна побудувати поліном, який апроксимує саму функцію.
Для необоротних функцій побудувати поліном, що відновлює функцію, неможливо.

Так як RSA -- блоковий алгоритм. На відміну від DES або GOST, алгоритм RSA допускає довільну довжину блоку. Мінімальна довжина блоку -- 2 символи. Рекомендована довжина блоку -- 8 символів.

Нехай задано вихідне повідомлення  $$ M $$. Шифрований текст отримуємо як $$ C = M^{e} \mod N $$. Процедуру розшифрування, можна представити у вигляді -- $$ M = C^{d} \mod N $$. Тут _N_ -- довжина блоку, _e_, _d_ -- ключі.
Втім, числа _e_, _d_ і _N_ не є випадковими.

1. $$ N = p \cdot q $$, де _p_ і _q_ -- прості числа
2. $$ \Phi(N) = (p - 1) \cdot (q -1) $$. Тут $$\Phi$$ -- [функція Ойлера](https://en.wikipedia.org/wiki/Euler_function)
3. $$ GCD(e, \Phi(N)) = 1 $$ -- тобто _e_ і $$\Phi(N)$$ -- взаємнопрості
4. $$ (e \cdot d) \mod \Phi(N) = 1 $$.

Порядок чисел _e_ і _d_ доволі великий -- більше 350 біт

Швидкодія алгоритму RSA залишає бажати кращого, тому шифрувати великі об'єми інформації алгоритмом RSA не рекомендується. Зазвичай інформацію шифрують якимось симетричним алгоритмом (DES/ AES), а ключ шифрування потім шифрується асиметричним криптоалгоритмом (напр. RSA).

#### Киптостійкість

У алгоритмі RSA маємо 2 ключі -- _e_ і _d_. Один із ключів -- приватний. Якщо у злочинця є відкритий ключ _e_, то:

$$ d = \frac{n \cdot \Phi(N) + 1}{e} $$

$$ \Phi(N) = (p - 1) \cdot (q - 1) = p \cdot q - (p + q) + 1 = N - (p + q) + 1 $$

$$ N = p \cdot q $$

Щоб знайти _d_ потрібно факторизувати число _N_. Так як числа _N_, _p_, _q_ -- великі (~ 250 біт) -- то факторизація займає доволі багато часу (до декількох років)

В алгоритмі RSA поняття ключ стосується (e; N) і (d; N), де N > e і  N > d

#### Оцінка складності дешифруванн повідомлення, зашифрованого RSA залежно від довжини основи ключа N

| Довжина N (біти) | складність обчислень (операцій) | пам'ять для алгоритму (біт) | Час вирішення задачі ( при 10^9 оп/c ) |
|------------------|---------------------------------|-----------------------------|----------------------------------------|
| 128 (50) | $$ 2 \cdot 10 ^ {12} $$ | $$ 7 \cdot 10 ^ {6} $$ | ~ 2-3 хв |
| 200 (70) | $$ 10 ^ {16} $$ | $$ 10 ^ {8} $$ | ~ 2-3 місяці | 
| 256 (90) | $$ 9 \cdot 10 ^ {17} $$ | $$ 10 ^ {9} $$ | ~ 10 років |
| 512 (180) | $$ 4 \cdot 10 ^ {24} $$ | $$ 3 \cdot 10 ^ {12} $$ | ~ 100 років |
| 1024 (360) | $$ 10 ^ {34} $$ | $$ 10 ^ {17} $$ | ~ 500 років |
| 2000 (720) | $$ 7 \cdot 10 ^ {47} $$ | $$ 10 ^ {24} $$ | ~ 1000 років |

#### Підсумок

Алгоритм RSA -- класична асиметричн криптосистема і фактично єдиний алгоритм, прийнятий у якості стандарту серед асиметричних криптосистем.

Даний алгоритм початково дозоляв відмовитися від секетного каналу передачі даних та використовувався в основному для передачі незначних службових повідомлень. На сьогоднішній день повідомлення лобсягом до 1 кб можна гифрувати цим алгоритмом.

#### Побудова цифрових підписів для алгоритму RSA

В асиметричних криптосистемах для побудови цифрових підписів міняються ролі ключів. При шифруванні текст шифрується відкритим ключем (іншого абонента), а розшифровується власним закритим ключем.

$$ Ш_{К^{o}_{B}}(M) -> РШ_{K^{з}_{A}}(M) $$

