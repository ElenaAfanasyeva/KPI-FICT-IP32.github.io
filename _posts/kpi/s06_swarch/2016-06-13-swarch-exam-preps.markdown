---
layout: post
title:  "Питання до екзамену"
date:   2016-06-13 10:25:00 +0200
categories: kpi_s06_swarch
---

# Загальна інформація

# Розгляд питань

В основному взято з [питання на гітхабі](https://github.com/HowProgrammingWorks/Letters/issues/1) до списку питань на іспит.

## № 33. Классификация языков программирования по уровню абстракции

Вообще, классификаций есть несколько, например: 

- микрокод, 
- машинный код, 
- ассемблеры, 
- языки низкого уровня общего назначения (как C, C++, Pascal), 
- языки высокого уровня общего назначения (C#, Java, Python, JavaScript), 
- специализированные языки высокого уровня (как SQL, Matlab), 
- узкоспециализированные языки DSL. 

Есть и другие классификации, мы обсуждали на лекциях несколько, но даже если Вы на экзамене сами проанализируете языки и построите классификацию исходя из своего опыта и понимания, то по ней я смогу оценить Ваш уровень.

## № 40. Классификация способов непрямого наследования

Мы рассматривали как минимум непрямое наследование через примеси, через события, через замыкания. Вообще их больше, но эти основные нужно уметь пояснить.

## № 47. Контексты и управление видимостью в контекстах

Имеется в виду контексты функций, модулей, глобальный контекст, песочницы. Порождение контекстов, управление контекстами на примере API виртуальной машины V8 или любой другой реализации.

## № 48. Оптимизирующие компиляторы и их особенности

Создание скрытых классов, статистическое определение типов, не явные дженерики, прогревание кода, например в V8, но подобные вещи происходят и при компиляции C/C++ и в других виртуальных машинах .Net, JVM.

## № 53. Глобальное состояние и комбинаторный взрыв

В чем проблема использования глобального состояния, почему все же есть возможность его использовать, что именно делать с ним хорошо, а что плохо и почему. Комбинаторный взрыв происходит при размещении структур данных в глобальном состоянии и обращении к ним из разных функций, классов и модулей, которые могут так его модифицировать, что обобщенный их результат не предсказуем, дает комбинаторный взрыв.

## № 54. Способы минимизации глобального состояния

Песочницы, замыкания, модули, экранирование модулей друг от друга, разделение состояния различными способами, например, переходя на взаимодействие через подписку событий, на контракты или абстрактные интерфейсы, на очереди запросов.

## № 57. Организация слоя доступа к данным

Зачем нужен слой доступа к данным DAL (data access layer), его задачи и эффект от использования.

## № 58. Место кода бизнес-логики, интерфейсов и фреймворка в архитектуре ПО

Код может относиться или к абстрактным алгоритмам, как сортировка, матметоды, шифрование, алгоритмы статистики и т.д., может относиться к модели предметной области, может относиться к организации пользовательского интерейса, а может относиться к API платформы (фреймворка), вот как определить, какой код к чему относится и не смешать его. Это слишком большая тема, чтобы я ее тут написал.

## № 59. Экранирование модулей приложения друг от друга

Как скрыть внутренности модуля, внутренние структуры данных и функции, например, при помощи ООП, песочниц и областей видимости, см. № 54
