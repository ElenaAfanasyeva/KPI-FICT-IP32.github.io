---
layout: post
title: "Лекція 4. Тест-дизайн"
date: 2016-10-06 10:40:55 +0300
categories: kpi_s07_sw_quality
---

> Тест-дизайн -- такой инструмент, который помогает не писать тесты ради тестов.

## Test liifecycle

1. **Analysis**
2. **Test planning**
3. **Test Design** -- стадія проектування, написання тестової документації
4. **Test Execution** -- стадія виконання тестів
5. **Acceptance Testing**
6. **Test Closure Activities** -- згортання тестових активностей -- почистити після тестів
7. **Testing Reportig**


## Test Design Techniques

Інколи виникає бажання якось поміряти ефективність тестів. Існують такі метрики:

- code coverage $$ {code\ coverage} = \frac{lines\ of\ code}{strings\ covered\ by\ tests} \cdot 100 \% $$
- requirements coverage -- покриття вимог теста

Методи:

- **Equivalent partitioning** -- метод класів еквівалентності. Суть полягає у розділенні вхідних даних на  групи (класи еквівалентності), для яких сценарій виконання буде одним і тим же. Тоді достатньо перевірити по одному сценарію з кожного класу еквівалентності і по одному сценарію за межами того класу еквівалентності. Основне призначення цього методу -- тестувати швидше і робити менше непотрібних дій.
- **Boundary values** -- метод граничних значень. Перевірка коректності роботи програми на даних, що знаходяться на границі класів еквівалентності.

  > Есть условный PornHub. Допустим, на входе пользователя спрашивают его дату рождения. Если есть 18, то показывать ему взрослый контент, если нет -- то не показывать. В этом случае тестированием граничных значением будет проверка разных случаев, когда пользователю ровно 18 лет.


  - Вточнити границі

    > a < 1000  ===> b=5
    >
    > a:[1000;5000] ===> b=10
    >
    > a>5000 ===> b=15

  - Визначити величину "кроку" між сусідніми значеннями
  
    > a-n, a, a+n, b-n, b, b+n

- **State-transition technique** -- аналіз переходів станів системи. Якимось чином малюєте / виписуєте всі стани системи і позначаєте "зеленими стрілочками" всі можливі переходи. Коли це візуалізовано, на кожен стан пишуться тести, потім пишуться позитивні тести на кожну зелену стрілочку і негативні тести на кожну відсутню стрілочку (там де переходів бути не повинно).

  Протестуємо світлофор. Маємо такі стани:

  1. "зелений чоловічок" + "червоний водій"
  2. "зелений чоловічок миготить"
  3. "червоний чоловічок" + "червоний або жовтий водій"
  4. "червоний чоловічок" + "зелений водій"
  5. "зелений чоловічок миготить" + "червоний або жовтий водій"

  Переходи: `1 --> 2 --> 3`

- **Error Guessing** -- написання тестових сценаріїв на базі вгадування потенційних вразливостей та помилок.
  
  > Чтобы найти баг, ты должен думать как баг

- **Exploratory**
- **Pair-wise testing** -- Тестування унікальних пар. [pairwise.org](http://pairwise.org)

  ```
  OS: win, mac, lin
  Browser: chrome, firefox, safari
  DB: db1, db2, db3
  Local: EN, DE, UA
  ---------------------------------
  Total: 81 different env
  ```

  Суть у тому, щоб не перебирати усі варіанти, а щоб перебрати таку кількість варіантів, щоб у них була кожна унікальна пара

  ```
   OS | Browser | DB | Loc
  ----+---------+----+----
  Win | chrome  |db1 | en
  Win | firefox |db2 | de
  Win | safari  |db3 | ua
  Mac | chrome  |db2 | ua
  Mac | firefox |db3 | en
  Mac | safari  |db1 | de
  Lin | chrome  |db3 | de
  Lin | firefox |db1 | ua
  Lin | safari  |db2 | en
  ```

  Таким чином замість 81, ми отримали 9 вибірок
